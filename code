/** @author Wellington Mancin
 *  Identification of nitrogen nutritional status in Brachiaria brizantha cv. Xaraés applying segmentation and analysis image in RGB system
 */

public static void main() throws Throwable {    
  System.loadLibrary( Core.NATIVE_LIBRARY_NAME );    
  BufferedImage A, B, C, binary, bin_erode, E; 
  String  nome_arq = JOptionPane.showInputDialog(null, "Insira nome do arquivo a analisar:");
                   
             arq=nome_arq;
             A= CarregaImagens(nome_arq);                                     //loads file in variable A type BufferedImage
             int alt =  A.getHeight();                                        //identifies the height and width of the image
             int larg =  A.getWidth();
             filterGaussian(A,"C:\\temp\\analise\\"+nome_arq+"-gray.jpg");     //apply gaussian filter - after save img in grayscale
             C= CarregaImagensGray(nome_arq);                                  //get img grayscale
             binary = toBinary(C, otsuTreshold(C));                           //to generate segmented / binarized image using threshold
             ByteProcessor processor = new ByteProcessor(binary);            //import library of software 'ImageJ'
             processor.erode(1,0);                                           //apply erode function 
             bin_erode = (BufferedImage)processor.createImage();
             tira_fundo_preto(A, bin_erode, alt, larg, nome_arq+"B");       //replaces black background from original img to white
             B= CarregaImagens(nome_arq+"B");                               //carrega novo arq img na variável B tipo BufferedImage
             equalizacao(B);                                                //equalize histogram
             E= CarregaImagens(nome_arq+"E"); 
             media_ind_cor(E, alt, larg);                                   //scan original img to extract RGB
      
}   
    
 
      ////////////////////////////////////////////////////////////////
      // upload image automatically
      ////////////////////////////////////////////////////////////////
public static BufferedImage CarregaImagens(String nome_arq) {
    BufferedImage image = null;
    File img = new File("C:\\temp\\analise\\"+nome_arq+".jpg");
    try {
          image = ImageIO.read(img);
        } catch (IOException ex) {
              JOptionPane.showMessageDialog(null, "Erro ao carregar imagem."+ex);
        }
    return image;
}

      ////////////////////////////////////////////////////////////////
      // upload image (grayscale) 
      ////////////////////////////////////////////////////////////////
public static BufferedImage CarregaImagensGray(String nome_arq) {
    BufferedImage image = null;
    File img = new File("C:\\temp\\analise\\"+nome_arq+"-gray.jpg");
    try {
         image = ImageIO.read(img);
        } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao carregar imagem."+ex);
        }
    return image;
}
    
 
    ////////////////////////
    // Apply Gaussian filter to reduce low frequency
    // already grayscale, after the filter, at the moment of the image transfer
    //////////////////////       
public static void filterGaussian(BufferedImage im, String nomearq){ 
    Mat source = img2Mat(im, im.getWidth(), im.getHeight());               //converts to array
    Mat destination = new Mat(source.rows(),source.cols(),source.type());
    Imgproc.GaussianBlur(source, destination,new Size(45,45), 0);          //apply filter openCV
    im = mat2Img(destination, im.getWidth(), im.getHeight());              //converts array to img grayscale
    try {
        ImageIO.write(im, "jpg", new File(nomearq));                       //save img
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Erro ao aplicar filtro Gaussiana."+ex);
    }
  } 

      ////////////////////////////////////////////////////////////////
      // Returns grayscale histogram of the image - that is, it only reads an array, so fetch red
      ////////////////////////////////////////////////////////////           
 public static int[] imageHistogram(BufferedImage input) {
    int[] histogram = new int[256];
    for(int i=0; i<histogram.length; i++) histogram[i] = 0;
    for(int i=0; i<input.getWidth(); i++) {
        for(int j=0; j<input.getHeight(); j++) {
                int red = new Color(input.getRGB (i, j)).getRed();
                histogram[red]++;
        }
    }
    return histogram;
}
    
      ////////////////////////////////////////////////////////////////
      // It generates automatic grayscale Otsu treshold to generate binarized img
      ////////////////////////////////////////////////////////////           
private static int otsuTreshold(BufferedImage original) {
    int[] histogram = imageHistogram(original);
    int total = original.getHeight() * original.getWidth();
    float sum = 0;
    for(int i=0; i<256; i++) sum += i * histogram[i];
    float sumB = 0;
    int wB = 0;
    int wF = 0;
    float varMax = 0;
    int threshold = 0;

    for(int i=0 ; i<256 ; i++) {
        wB += histogram[i];
        if(wB == 0) continue;
        wF = total - wB;
        if(wF == 0) break;
        sumB += (float) (i * histogram[i]);
        float mB = sumB / wB;
        float mF = (sum - sumB) / wF;
        float varBetween = (float) wB * (float) wF * (mB - mF) * (mB - mF);
        if(varBetween > varMax) {
            varMax = varBetween;
            threshold = i;
        }
    }
 return threshold;
}   

      ////////////////////////////////////////////////////////////////
      // converts image to binary usaldo algorithm treshold Otsu calculated
       // Anything below the threshold (parameter "t") will be converted to black. Above or equal will be converted to white.
       // Image to be converted (only channel r will be considered)
      ////////////////////////////////////////////////////////////    
 private static BufferedImage toBinary(BufferedImage image, int t) {   
    int BLACK = Color.BLACK.getRGB();
    int WHITE = Color.WHITE.getRGB();
    BufferedImage output = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_GRAY);
    // Percorre a imagem definindo na saída o pixel como branco se o valor
    // na entrada for menor que o threshold, ou como preto se for maior.
    for (int y = 0; y < image.getHeight(); y++)
            for (int x = 0; x < image.getWidth(); x++) {
                    Color pixel = new Color(image.getRGB(x, y));
                    output.setRGB(x, y, pixel.getRed()< t ? BLACK : WHITE);  //uso do treshold
            }
    return output;
}

      ////////////////////////////////////////////////////////////////
      // black background image exchange based on binarized image, leaving it with white background
      ////////////////////////////////////////////////////////////////
public static void tira_fundo_preto(BufferedImage img, BufferedImage Bin,int alt, int larg, String nome){
  //recuperar os pixels da imagem
  Raster rasterBin = Bin.getRaster();
  int BB=0 ;
    //passar pixel a pixel trocando fundo preto por branco baseado na img binarizada
     for (int i=0;i<alt;i++)         //i é a coord y da imagem
         for(int j=0; j<larg;j++){   //j é a coord x da imagem
             BB = rasterBin.getSample(j, i, 0);
             if( BB == 0) {     ///troca fundo preto pelo branco na mesma imagem
               img.setRGB(j, i, 0xFFFFFFFF);   //white
             } 
         }
     try {
            ImageIO.write(img, "jpg", new File("C:\\temp\\analise\\"+nome+".jpg"));  //grava imagem
         } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao troca fundo para branco. = "+ex);
         }
}     

      ////////////////////////////////////////////////////////////////
      // calculation of the individual mean of each r, g and b of all image pixels 
      ////////////////////////////////////////////////////////////////
public static void media_ind_cor(BufferedImage img, int alt, int larg){
  //recuperar os pixels da imagem
  Raster raster = img.getRaster();
  double soma_r=0.0, soma_g=0.0, soma_b=0.0, media_R=0.0, media_G=0.0, media_B=0.0, soma_matiz=0.0,media_matiz=0.0, media_brilho=0.0, media_sat=0.0;
  int r=0, g=0, b=0, cont=0, BB=0 ;
  
  //passar pixel a pixel pegando valor e calculando a média simples
     for (int i=0;i<alt;i++)         //i é a coord y da imagem
        for(int j=0; j<larg;j++){    //j é a coord x da imagem
            BB = img.getRGB(j, i);
            if( BB != 0xFFFFFFFF) {             //if RGB image not equals "white", then get RGB leaf
               r = raster.getSample(j, i, 0);   // 0 = red, 1=green e 2=blue
               g = raster.getSample(j, i, 1);
               b = raster.getSample(j, i, 2);
                soma_r += r;                   //sum values
                soma_g += g;
                soma_b += b;       
                cont++;                       //add +1 pixel read
            } 
        }
     media_R = soma_r/cont;       //average value pixels R, G and B
     media_G = soma_g/cont;
     media_B = soma_b/cont;
          
     System.out.print("\t R: ");System.out.printf("\t%.3f", media_R );
     System.out.print("\t G: ");System.out.printf("\t%.3f", media_G );
     System.out.print("\t B: ");System.out.printf("\t%.3f", media_B );
     
     calcula_IV(media_R, media_G, media_B);
     
}

    ////////////////////////////////////////
    // Conversion of the RGB color system to the HSB system
    ////////////////////////////////////////
public static void convertRGB_HSL(double R, double G, double B){
    double max, min;
    double UNDEF = 360.0;
    double delta;
    double lightness=0.0;
    double saturation = 0.0;
    double hue = 0.0;
    double media_matiz=0.0, media_brilho=0.0 , media_sat=0.0;
    
    // Acha os valores maximo e minimo
        max = R;
        if (max < G)
            max = G;
        if (max < B)
            max = B;
        min = R;
        if (min > G)
            min = G;
        if (min > B)
            min = B;
      
        if (max == B){
           media_matiz= (60*((R-G)/(max-min)))+240;
        }else if (max == G){
                media_matiz=(60*((B-R)/(max-min)))+120;
              }else if (max == R && G<B){
                        media_matiz=(60*((G-B)/(max-min)))+360;
                    }else if (max == R && G>=B){
                            media_matiz=60*((G-B)/(max-min));
                          }
        media_sat=(max-min)/max;
        media_brilho=max/255;
     System.out.print("\t Matiz: ");System.out.printf("\t%.3f ", media_matiz);
     System.out.print("\t Satur: ");System.out.printf("\t%.3f ", media_sat);
     System.out.print("\t Brilho: ");System.out.printf("\t%.3f ", media_brilho);
     System.out.printf("\t");       
   
    
}

      ////////////////////////////////////////////////////////////////
      // I calculate the vegetation indices with the rgb values extracted image
      ////////////////////////////////////////////////////////////////
public static void calcula_IV(double media_R, double media_G, double media_B){
        //performs calculations of vegetation indices, by specific formulas, with values of RGB and HSB extracted in the other methods
}            
  
    ///////////////////////////////////////////
    // Convert array to BufferedImage
    //////////////////////////////////////////
public static BufferedImage mat2Img(Mat in, int w, int h){
    BufferedImage out;
    byte[] data = new byte[w * h * (int)in.elemSize()];
    int type;
    in.get(0, 0, data);
    if(in.channels()== 1)
        type = BufferedImage.TYPE_BYTE_GRAY;
    else
        type = BufferedImage.TYPE_3BYTE_BGR;
    out = new BufferedImage(w, h, type);
    out.getRaster().setDataElements(0, 0, w, h, data);
  return out;
} 
   
    ////////////////////////////////////////
    // Convert BufferedImage to array
    ////////////////////////////////////////
public static Mat img2Mat(BufferedImage in, int w, int h) {
    Mat out;
    byte[] data;
    int r, g, b;
    if(in.getType() == BufferedImage.TYPE_INT_RGB){
      out = new Mat(h, w, CvType.CV_8UC3);  //rgb
      data = new byte[w * h * (int)out.elemSize()];
      int[] dataBuff = in.getRGB(0, 0, w, h, null, 0, w);
      for(int i = 0; i < dataBuff.length; i++){
          data[i*3] = (byte) ((dataBuff[i] >> 16) & 0xFF);
          data[i*3 + 1] = (byte) ((dataBuff[i] >> 8) & 0xFF);
          data[i*3 + 2] = (byte) ((dataBuff[i] >> 0) & 0xFF);
      }
    }
    else{
        out = new Mat(h, w, CvType.CV_8UC1);              
        data = new byte[w * h * (int)out.elemSize()];
        int[] dataBuff = in.getRGB(0, 0, w, h, null, 0, w);
        for(int i = 0; i < dataBuff.length; i++){
           r = (byte) ((dataBuff[i] >> 16) & 0xFF);
           g = (byte) ((dataBuff[i] >> 8) & 0xFF);
           b = (byte) ((dataBuff[i] >> 0) & 0xFF);
           data[i] = (byte)((0.21 * r) + (0.71 * g) + (0.07 * b));  
        }
    }
    out.put(0, 0, data);
   return out;
 } 

    ////////////////////////////////////////
    //  Generates the value of the cumulative histogram
    ////////////////////////////////////////
public static int[] calculaHistogramaAcumulado(int[] histograma) {
        int[] acumulado = new int[256];
        acumulado[0] = histograma[0];
        for(int i=1;i < histograma.length;i++) {

            acumulado[i] = histograma[i] + acumulado[i-1];
        }
        return acumulado;
    }

    ////////////////////////////////////////
    // takes the lowest histogram value
    ////////////////////////////////////////
private static int menorValor(int[] histograma) {
        for(int i=0; i <histograma.length; i++) {
            if(histograma[i] != 0){
                return histograma[i];
            }
        }
   return 0;
}

    ////////////////////////////////////////
    // generates an array with image color map
    ////////////////////////////////////////
private static int[] calculaMapadeCores(int[] histograma, int pixels) {
        int[] mapaDeCores = new int[256];
        int[] acumulado = calculaHistogramaAcumulado(histograma);
        float menor = menorValor(histograma);
        for(int i=0; i < histograma.length; i++) {
            mapaDeCores[i] = Math.round(((acumulado[i] - menor) / (pixels - menor)) * 255);
        }
    return mapaDeCores;
}

    ////////////////////////////////////////
    // Histogram equalization
    ////////////////////////////////////////
public static BufferedImage equalizacao(BufferedImage img) {
        //2.1- calcular histograma
        int[] histograma = imageHistogram(img);
        //2.2- calcular novo mapa de cores
        int[] mapaDeCores = calculaMapadeCores(histograma, img.getWidth() * img.getHeight());
        //2.3- atualizar palheta de cores da imagem
        BufferedImage out = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);
        for (int y = 0; y < img.getHeight(); y++) {
            for (int x = 0; x < img.getWidth(); x++) {
                Color color = new Color(img.getRGB(x, y));
                int tom = color.getRed();
                int newTom = mapaDeCores[tom];
                Color newColor = new Color(newTom, newTom, newTom);
                out.setRGB(x, y, newColor.getRGB());
            }
        }
        // retornar imagem processada
         try {
         ImageIO.write(img, "jpg", new File("C:\\temp\\analise\\"+arq+"E.jpg"));  //grava imagem
        } catch (IOException ex) {
         JOptionPane.showMessageDialog(null, "Erro ao equalizar histograma."+ex);
        }
  return out;
}

